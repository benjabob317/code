#!/usr/bin/env node
// ProTip™: Choose meaningful names
// ProTip™: smaller the scope, shorter the names
// ProTip™: Use lowercase names (usually)
// ProTip™: Semicolons are optional

//Declare and assign a global string variable [avoid]
name = "Ben"
name = "bob" // Stomped!
//console.log(name)

// Declare and assign a functionally scoped variable using var
var job = "Woodcutter"
var job = "Butcher" // Stomped!
//console.log(job)

// Declare and assign a block scoped string variable
let city = "Mooresville"
//let city = "Charlotte" // Stomp denied!
city = "Charlotte" // Success!
//console.log(city)

// Declare and assign an integer variable
let age = 14

// Declare and assign a float (decimal) 
let interest = 0.21

// Declare and assign a constant float
const G = 9.8
//const G = 3.1415926535897932384626 // Denied!

// Declare and assign a list of strings
let answers = ['no', 'yes', 'maybe']
let firstanswer = answers[0] // Value in the list with index 0 (first value)

let moreanswers = [ // Lists can be declared with multiple lines
    'A',
    'B',
    'C',
    'D'
]
//console.log(moreanswers)

// ProTip™: Use camelCase style for JS variables, captial letters to separate words in a variable name

//Declare and assign a complex dictionary (keys and values)
let student = {
    'name': 'Ben',
    'age': age, // Dict values canbe set to existing variables
    'answers': answers,
    'games': [
        'Minecraft',
        'NationStates'
    ],
    'gameData': {
        'Minecraft': '64 diamonds',
        'NationStates': '40 nations',
    }
}
/* 
console.log(student['name']) // value of key name
console.log(student.name) 

student.games[1] //index 1 of list games
student['games'][1]

student.gameData.Minecraft // dict inside of a dict
this looks like object-oriented programming because it is! Dictionaries are called objects in JS
*/

// Associative array/hash/object all means dictionary
// JSON - JavaScript Object Notation, JSON has the formatting of dictionaries in JavaScript and other languages

