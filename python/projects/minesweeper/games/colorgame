#!/usr/bin/env python3

#base game with colors added, might not work in all terminals
import random
import skilstak.colors as c #a color module
import sys

board = {} #dictionary of board

def init(width, height, minecount): #31 by 16 board with 99 mines is expert mode
    for x in range(1, ((width*height) + 1)): #creates spaces row by row
        board[x] = [' ', 'O'] #value, apparent value

    for x in range(0, minecount): #randomly creates 99 mines
        pos = random.randint(1, (width*height)) #picks a random spot to place a mine
        while board[pos] == '*': #if a mine already exists, finds a new place
            pos = random.randint(1, (width*height))
        board[pos] = ['*', 'O']

    #generates number data
    for x in range(1, ((width*height) + 1)):
        if board[x][0] != '*':
            surroundings = [] #list containing the surrounding 8 spaces
            if (x - width) > 0: #if not on the top
                surroundings.append(board[x - width][0]) #space directly above
                if x%width != 0: #if not on the far right
                    surroundings.append(board[x - (width - 1)][0]) #space on the top-right
                if (x-1)%width != 0: #if not on the far left
                    surroundings.append(board[x - (width + 1)][0]) #space on the top-left
            if (x - ((height - 1)*width)) <= 0: #if not on the bottom
                surroundings.append(board[x + width][0]) #space directly below
                if x%width != 0: #if not on the far right
                    surroundings.append(board[x + width + 1][0]) #space on the bottom-right
                if (x - 1)%width != 0: #if not on the far left
                    surroundings.append(board[x + (width - 1)][0]) #space on the bottom-left
            if x%width != 0: #if not on the far right, search space directly to the right
                    surroundings.append(board[x + 1][0]) #space directly to the right
            if (x - 1)%width != 0: #if not on the far left, search space directly to the left
                surroundings.append(board[x - 1][0]) #space directly to the left
            mine_counter = 0
            for i in surroundings: #counts the amount of mines in the surrounding 8 spaces
                if i == '*':
                    mine_counter += 1
            if mine_counter != 0:
                board[x][0] = str(mine_counter) #replaces the empty space with the number of mines in the surrounding 8 spaces

def refresh(width, height): #generates a visual board with numbers
    output = '' #prints the board to the screen
    for row in range(0, height): #scans through rows
        for x in range(1, (width+1)):
            if board[(row*width)+x][1] == '1':
                output += c.b+board[(row*width)+x][1]+c.x #ones are made blue
            elif board[(row*width)+x][1] == '2':
                output += c.g+board[(row*width)+x][1]+c.x #twos are made green
            elif board[(row*width)+x][1] == '3':
                output += c.r+board[(row*width)+x][1]+c.x #threes twos are made red
            elif board[(row*width)+x][1] == '4':
                output += c.v+board[(row*width)+x][1]+c.x #fours are made violet
            elif board[(row*width)+x][1] == '5':
                output += c.m+board[(row*width)+x][1]+c.x #fives are made magenta
            elif board[(row*width)+x][1] == '6':
                output += c.c+board[(row*width)+x][1]+c.x #sixes are made cyan
            elif board[(row*width)+x][1] == '7':
                output += c.b3+board[(row*width)+x][1]+c.x #sevens are made white
            elif board[(row*width)+x][1] == '8':
                output += c.y+board[(row*width)+x][1]+c.x #eights are made yellow
            else:
                output += board[(row*width)+x][1] #prints the relevant space
        output += '\n' #separates rows
    print('\n'*30)
    print(output)

def leftclick(square):
    board[square][1] = board[square][0]
init(int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3]))
refresh(int(sys.argv[1]), int(sys.argv[2]))
for x in range(1, len(board)+1):
    leftclick(x)
    refresh(int(sys.argv[1]), int(sys.argv[2]))