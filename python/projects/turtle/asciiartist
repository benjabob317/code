#!/usr/bin/env python3
#curses window is 80 by 22 it would appear
import sys
import curses as s #main module
import time as t
import math
c = s.initscr()
x, y, direc = 40, 11, 90 #starts off the program
xcoords = []
ycoords = []
args = sys.argv
inputs =[]

def getslope(direction): #converts angle turned into slope
    if direction in [0, 90, 180, 270, 360]:
        slope = 'depends on program'
    else:
        slope = 0-math.tan((math.pi*(direction-90))/180)
    return slope

def reallengths(length, slope, direction): #pythagorean theorem along with terminal character widths, determines length needed to be drawn
    mult = (length**2/(slope**2 + 1))
    if 0 < direction < 90:
        yln = (slope**2 * mult)**0.5
        xln = mult**0.5
    if 90 < direction < 180:
        yln = 0-((slope**2 * mult)**0.5)
        xln = mult**0.5
    if 180 < direction < 270:
        yln = 0-((slope**2 * mult)**0.5)
        xln = 0-(mult**0.5)
    if 270 < direction < 360:
        yln = (slope**2 * mult)**0.5
        xln = 0-(mult**0.5)
    return yln*0.5, xln

def newdiaglinecoords(direction, length): #generates a set of coordinates for a line based on the degree direction and length 
    global x
    global y
    global xcoords
    global ycoords
    if len(xcoords) > 0 or len(ycoords) > 0:
        while len(xcoords) > 0:
            xcoords.remove(xcoords[0])
        while len(ycoords) > 0:
            ycoords.remove(ycoords[0])
    slope = getslope(direction)
    ylen, xlen = reallengths(length, slope, direction)
    if abs(xlen) > abs(ylen):
        reps = abs(xlen)
    else:
        reps = abs(ylen)
    reps = round(reps)
    for w in range(0, reps):
        xcoords.append(x + ((xlen/reps)*(w+1)))
        ycoords.append(y + (((0 - ylen)/reps)*(w+1)))

def diaglinechar(direction): #chooses a character to draw the line based on its direction
    if 337.5 < direction < 360 or 0 < direction < 22.5 or 157.5 < direction < 202.5:
        char = '|'
    if 67.5 < direction < 112.5 or 247.5 < direction < 292.5:
        char = '='
    if 22.5 <= direction <= 67.5 or 202.5 <= direction <= 247.5:
        char = '/'
    if 112.5 <= direction <= 157.5:
        char = '\\'
    return char

def newdiagline(direction, length): #core function of the program, draws a diagonal line
    global x
    global y
    global xcoords
    global ycoords
    if direction < 0:
        direction = direction + 360
    newdiaglinecoords(direction, length)
    char = diaglinechar(direction)
    for q in range(0, len(xcoords)):
        c.addstr(round(ycoords[q]), round(xcoords[q]), char)
        t.sleep(0.5)
        c.refresh()
    x = xcoords[len(xcoords) - 1]
    y = ycoords[len(ycoords) - 1]

def newstraightline(direction, length): #draws a horizontal/vertical line
    global x
    global y
    if direction == 0:
        for z in range(0, length):
            c.addstr(round(y), round(x), '|')
            t.sleep(0.25)
            c.refresh()
            y += 0.5
    if direction == 90:
        for z in range(0, length):
            c.addstr(round(y), round(x), '=')
            t.sleep(0.5)
            c.refresh()
            x += 1
    if direction == 180:
        for z in range(0, length):
            c.addstr(round(y), round(x), '|')
            t.sleep(0.25)
            c.refresh()
            y -= 0.5
    if direction == 270:
        for z in range(0, length):
            c.addstr(round(y), round(x), '=')
            t.sleep(0.5)
            c.refresh()
            x -= 1
def forward(length): #draws a line, easy to use
    global direc
    if direc >= 360:
        direc -= 360
    if direc < 0:
        direc += 360
    if direc != 0 and direc != 90 and direc != 180 and direc != 270:
        newdiagline(direc, length)
    else:
        newstraightline(direc, length)
def turn(degrees): #allows for easy rotation
    global direc
    direc += degrees
for i in range(0, 2):
    forward(10)
    turn(72)
t.sleep(1)
s.endwin()