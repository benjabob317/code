#!/usr/bin/env python3

#This program calibrates Derpseh's Spyglass program, which can be found at https://github.com/Derpseh/Spyglass
#Place this in your Spyglass-master/Source folder

import urllib.request
from urllib.error import HTTPError
import math
import time
import random

site = urllib.request.urlopen("https://www.nationstates.net/cgi-bin/api.cgi?region=doll_guldur")
html = str(site.read())
nation_count = int(html.split('<NUMNATIONS>')[1].split('</NUMNATIONS>')[0]) #amount of nations in the region
nation_list = html.split('<NATIONS>')[1].split('</NATIONS>')[0].split(':')
time.sleep(.6) #NS rules
print('Nation list completed!\n')

#time-saving segment
iterate_choice = ''
while iterate_choice not in ['y', 'n']:
    iterate_choice = input('Not searching every nation would save a lot of time. Would you like search every nation? (y/n) > ')
if iterate_choice == 'y':
    pass
if iterate_choice == 'n':
    nations_to_search = ''
    while not nations_to_search.isdigit():
        nations_to_search = input("There are " + str(nation_count) + " nations in Doll Guldur. How many do you wish to search? Keep in mind, less nations means less accuracy. > ")
    random.shuffle(nation_list)
    nation_list = nation_list[0:int(nations_to_search)]

#This section of the program gets all the update times available for each nation. This process will take a long time.
update_times = []
for x in range(0, len(nation_list)):
    nation = "https://www.nationstates.net/cgi-bin/rss.cgi?nation=" + nation_list[x]
    try:
        nationsite = urllib.request.urlopen(nation)
    except HTTPError:
        print(nation_list[x] + ' - 404 nation not found')
    else:
        nationhtml = str(nationsite.read())
        if len(nationhtml.split('influence in Doll Guldur')) > 1:
            for y in range(1, len(nationhtml.split('influence in Doll Guldur'))):
                update_times.append(nationhtml.split('influence in Doll Guldur')[y].split('<pubDate>')[1].split('</pubDate>')[0]) #update time as a string
        print('Nation ' + str(x+1) + ' out of ' + str(len(nation_list)) + ' - success')
        time.sleep(.6) #to comply with NS rules

def seconds_since_2000(update): #finds seconds since since 2000 for an update, used to find the last nation of the most recent update in the region
    year = int(update.split()[3])
    month = update.split()[2]
    day = int(update.split()[1])
    monthnames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    monthlengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    days = ((year-2000)*365) + math.ceil((year-2000)/4) #days before the current year, considering leap years
    days += sum(monthlengths[0:monthnames.index(month)]) + day
    seconds = (days*86400) + (int(update.split()[4].split(':')[0])*3600) + (int(update.split()[4].split(':')[1])*60) + int(update.split()[4].split(':')[2])
    return seconds

minor_times = []
major_times = []
for x in update_times:
    if int(x.split()[4].split(':')[0]) < 21: #if hour is less than 21
        minor_times.append(x)
    else:
        major_times.append(x)
minor_times.sort(key=lambda x: 0-seconds_since_2000(x)) #Sorts the update times based on date
major_times.sort(key=lambda x: 0-seconds_since_2000(x)) #Sorts the update times based on date

latest_minor = ((int(minor_times[0].split()[4].split(':')[0])-9)*3600) + (int(minor_times[0].split()[4].split(':')[1])*60) + int(minor_times[0].split()[4].split(':')[2])
latest_major = ((int(major_times[0].split()[4].split(':')[0])-21)*3600) + (int(major_times[0].split()[4].split(':')[1])*60) + int(major_times[0].split()[4].split(':')[2])
print(latest_minor)
print(latest_major)
with open('UpdTime', 'w') as UpdFile:
    UpdFile.write(str(latest_minor) + ', ' + str(latest_major))